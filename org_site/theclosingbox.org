#+hugo_base_dir: ../
#+hugo_weight: auto
#+options: author:nil
* The Closing Box
** Pages
:PROPERTIES:
:EXPORT_HUGO_SECTION: ./
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc false
:END:

*** about
:PROPERTIES:
:EXPORT_FILE_NAME: about
:EXPORT_DATE: 2020-05-11
:END:

Boston based.

"The correction of prose, because it has no fixed laws, is endless - a poem
comes right with a click like a closing box"

*** Mac Pro Build Log                                     :@macprobuildlog:
:PROPERTIES:
:EXPORT_HUGO_SECTION: posts
:END:

**** TODO macpro build - day 4
:PROPERTIES:
:EXPORT_FILE_NAME: mac-pro-buildlog-06
:EXPORT_DATE: 2020-08-30
:END:

With the PCI slots sorted out, it's time to turn to the processor tray.  This
was well trodden territory - upgrading the memory in the 5,1 Mac Pro was
something almost everyone did (Apple's memory prices are...rough, to say the
least), and I remember the CPU replacement process dimly from my days in the
blue t-shirt (the ridiculously long hex driver has a special place in my
heart).

As mentioned in the

**** DONE  macpro build - day 3
:PROPERTIES:
:EXPORT_FILE_NAME: mac-pro-buildlog-05
:EXPORT_DATE: 2020-08-29
:END:

Day three, fittingly enough, is all about Thunderbolt 3.  This was really the
key to the whole project; getting Thunderbolt 3 working meant I could easily
swap between my work computer and my personal computer.  I could use the same
peripherals and configuration (no moving monitors around or swapping input
devices - just one thunderbolt cable).  Ultimately, I was able to get everything
sorted such that my Caldigit TS3 Plus and LG 5k Ultrafine work perfectly on warm
boot (ie - they are not recognized as thunderbolt devices when the Mac Pro first
powers on from a shutdown state, but after being logged in to a user and
rebooted, they work just fine).  This includes hot plugging (hugely important
for me, seeing as I move a Thunderbolt cable from my work machine to my Mac
Pro.  If I had to reboot two or three times in between each of those, it would be incredibly
annoying.  In fact, it would be tempting to just leave my work computer set up.
And if my work computer is set up, I may as well do a little more work...and
that's how I would end up working far too late.  The dangers of working from
home!), brightness/webcam/speakers/mic/rear USB C ports on the LG 5k and all
ports on the Caldigit.  So what was the process?

***** the card

The Gigabyte GC-Titan Ridge PCIe card has two Thunderbolt 3-out ports, and two
DisplayPort-in ports (as I understand it, a single DisplayPort 1.2 cable cannot
carry 5k pixels; internally, the 5k iMac had to combine two DisplayPort streams
over a custom interconnect.  I /think/ that's also what spelled the end for
Target Display Mode, but that's more than a bit of a digression).  To make it
work in the 5,1 Mac Pro requires some finagling in three areas: power, firmware
and drivers.  This process is captured very nicely in some [[https://github.com/ameyrupji/thunderbolt-macpro-5-1/blob/master/GC-TitanRidge.md][great writeups]], and
[[https://forums.macrumors.com/threads/testing-tb3-aic-with-mp-5-1.2143042/page-1][exhaustive forum posts]], but there are a few pitfalls that I'll point out along
the way here.


***** power

Powering the Gigabyte GC-Titan Ridge card is pretty straightforward.  By design,
the included =THB_C= Header Cable would connect to the matching headers on a
Gigabyte Thunderbolt motherboard.  Clearly, we don't have those on the 5,1.
Instead, I jumped the third and fifth pins with a small piece of wire.

#+CAPTION: The small grey wire on the right jumps the third and fifth pin
file:/images/mp_13.svg

***** firmware

This process is a bit more involved.  Ultimately, we'll be using an EEPROM USB
Programmer to get some custom firmware flashed onto the Titan Ridge.  Reviewing
the manual for your particular USB Programmer is important - the one that I
purchased has a single identifying lead (one red wire) letting you know which is
the first pin of the chip.

#+CAPTION: Note the red wire matching up with the =1= lead
file:/images/mp_14.svg

I took the housing off of the Titan Ridge card, and clipped the programmer into
position.

To orient yourself on the Titan Ridge card, keep the thunderbolt ports as close
to you as possible, with the PCIe male interface on your right. The matching
first PIN on the chip is the bottom right on both the Blue and Green chips in
this orientation.

#+CAPTION: All wired up
file:/images/mp_15.svg

With the programmer all plugged in, I pulled down the =flashrom= tool (=brew
install flashrom=), and downloaded the DM2 firmware (available from the
previously linked MacRumors [[https://forums.macrumors.com/threads/testing-tb3-aic-with-mp-5-1.2143042/post-28291766][thread]]).  With the programmer clipped to the blue
chip, I confirmed that everything was working.

#+begin_example
tglynn@Neptune ~ $ flashrom -p ch341a_spi
flashrom v1.2 on Darwin 19.4.0 (x86_64)
flashrom is free software, get the source code at https://flashrom.org

Calibrating delay loop... OK.
libusb: info [darwin_claim_interface] no interface found; setting configuration: 1
Found Winbond flash chip "W25Q80.V" (1024 kB, SPI) on ch341a_spi.
No operations were specified.
#+end_example


On second run, that =libusb= error disappeared (default is set)

#+begin_example
tglynn@Neptune ~ $ flashrom -p ch341a_spi
flashrom v1.2 on Darwin 19.4.0 (x86_64)
flashrom is free software, get the source code at https://flashrom.org

Calibrating delay loop... OK.
Found Winbond flash chip "W25Q80.V" (1024 kB, SPI) on ch341a_spi.
No operations were specified.
#+end_example

Then, I backed up the original ROM.

#+begin_example
tglynn@Neptune ~/work/thunderbolt3_flash $ pwd
/Users/tglynn/work/thunderbolt3_flash
tglynn@Neptune ~/work/thunderbolt3_flash $ flashrom -p ch341a_spi -r OriginalFirmware-BlueChip.bin
flashrom v1.2 on Darwin 19.4.0 (x86_64)
flashrom is free software, get the source code at https://flashrom.org

Calibrating delay loop... OK.
Found Winbond flash chip "W25Q80.V" (1024 kB, SPI) on ch341a_spi.
Reading flash... done.
tglynn@Neptune ~/work/thunderbolt3_flash $ ls
OriginalFirmware-BlueChip.bin
tglynn@Neptune ~/work/thunderbolt3_flash $ file OriginalFirmware-BlueChip.bin
OriginalFirmware-BlueChip.bin: data
tglynn@Neptune ~/work/thunderbolt3_flash $
#+end_example

Then I moved over to the green chip and repeated the same process to back it up.

#+begin_example
tglynn@Neptune ~/work/thunderbolt3_flash $ flashrom -p ch341a_spi -r OriginalFirmware-GreenChip.bin
flashrom v1.2 on Darwin 19.4.0 (x86_64)
flashrom is free software, get the source code at https://flashrom.org

Calibrating delay loop... OK.
Found Winbond flash chip "W25Q80.V" (1024 kB, SPI) on ch341a_spi.
Reading flash... done.
tglynn@Neptune ~/work/thunderbolt3_flash $ ls
OriginalFirmware-BlueChip.bin  OriginalFirmware-GreenChip.bin
tglynn@Neptune ~/work/thunderbolt3_flash $ file OriginalFirmware-GreenChip.bin
OriginalFirmware-GreenChip.bin: data
#+end_example

With both safely backed up, it was time to flash the custom ROM.  I switched
back to the blue chip yet again.

#+CAPTION: In the orientation described above, the blue chip is on the left
file:/images/mp_16.svg


Then I wrote the updated firmware.

#+begin_example
tglynn@Neptune ~/work/thunderbolt3_flash $ flashrom -p ch341a_spi -w TitanRidgeNVM23-E64Fr.bin
flashrom v1.2 on Darwin 19.4.0 (x86_64)
flashrom is free software, get the source code at https://flashrom.org

Calibrating delay loop... OK.
Found Winbond flash chip "W25Q80.V" (1024 kB, SPI) on ch341a_spi.
Reading old flash chip contents... done.
Erasing and writing flash chip... Erase/write done.
Verifying flash... VERIFIED.
#+end_example


For good measure, I ran the verify as well (redundant with the previous commands
flags, but interesting to see).

#+begin_example
tglynn@Neptune ~/work/thunderbolt3_flash $ flashrom -p ch341a_spi -v TitanRidgeNVM23-E64Fr.bin
flashrom v1.2 on Darwin 19.4.0 (x86_64)
flashrom is free software, get the source code at https://flashrom.org

Calibrating delay loop... OK.
Found Winbond flash chip "W25Q80.V" (1024 kB, SPI) on ch341a_spi.
Verifying flash... VERIFIED.
#+end_example


If you were to say, oh I don't know, not realize the import of the red wire on
the USB programmer and clip onto the chip backwards (not that I have any
experience with that...) fear not!  In my experience, all that will happen is
the negotiation will fail, and the flashing capabilities won't be apparent.

#+begin_example
tglynn@Neptune ~/work/thunderbolt3_flash $ flashrom -p ch341a_spi
flashrom v1.2 on Darwin 19.4.0 (x86_64)
flashrom is free software, get the source code at https://flashrom.org

Calibrating delay loop... OK.
libusb: info [darwin_claim_interface] no interface found; setting configuration: 1
Found Generic flash chip "unknown SPI chip (REMS)" (0 kB, SPI) on ch341a_spi.
===
This flash part has status NOT WORKING for operations: PROBE READ ERASE WRITE
The test status of this chip may have been updated in the latest development
version of flashrom. If you are running the latest development version,
please email a report to flashrom@flashrom.org if any of the above operations
work correctly for you with this flash chip. Please include the flashrom log
file for all operations you tested (see the man page for details), and mention
which mainboard or programmer you tested in the subject line.
Thanks for your help!
No operations were specified.
#+end_example

Flipping the programmer back around and correctly lining up the pins should sort
that out.

With that, power and firmware were all sorted out.

***** drivers

Interestingly enough, you could stop right here and be most of the way done.
Once those pins are shorted and the custom firmware put into place, thunderbolt
3 works.  It seems that it can only enumerate devices when they're powered on
already, so there is a bit of a silly ritual to get things working.  Starting
with the machine powered off and the thunderbolt 3 device unplugged, power on
the Mac Pro.  Once the Mac Pro is powered on, plug in the Thunderbolt 3 device.
In my experience, the device would power on (the Caldigit's blue power indicator
came on, and the LG 5k even passed video through, working like a regular
monitor), but no ports or devices on the other end of the Thunderbolt device
would work (none of the USB ports on the Caldigit worked, and the
webcam/brightness controls/speaker/mic and USB ports on the LG 5k did not
work).  Rebooting would walk one step further in the chain; in my case, the
Caldigit would work just fine at that point, with every port functioning.  If
the LG 5k was connected to the downstream Thunderbolt 3 port of the Caldigit, it
would take yet another reboot before the next link in the chain would fill in
and the webcam/brightness/usb controls on the LG 5k would all work.  Unplugging
the Thunderbolt 3 cable would reset this dance, breaking the first link in the
chain and forcing me to walk back through all of that.

But that's less than ideal.  And, I'm pleased to tell you, there is a better
solution.  Enter Open Core, and a custom SSDT.  In this field, I think the
Hackintosh community has better documentation (see the [[https://www.tonymacx86.com/threads/success-gigabyte-designare-z390-thunderbolt-3-i7-9700k-amd-rx-580.267551/page-1640#post-2087524][repository of patched
Thunderbolt firmware files]], [[https://www.tonymacx86.com/threads/success-gigabyte-designare-z390-thunderbolt-3-i7-9700k-amd-rx-580.267551/page-1596#post-2085793][the quick comparative analysis of Thunderbolt DROM
and Thunderbolt Config]], [[https://www.tonymacx86.com/threads/success-gigabyte-designare-z390-thunderbolt-3-i7-9700k-amd-rx-580.267551/page-1603#post-2086071][thunderbolt drom decoded]], [[https://www.tonymacx86.com/threads/success-gigabyte-designare-z390-thunderbolt-3-i7-9700k-amd-rx-580.267551/page-1624#post-2086862][and the micro-guide for
gigabyte gc-titan ridge]] for much more detail).  I recognize that may be my own
language limitations (as I understand it, the source of the successful firmware
is a German Hackintosh forum, although I've seen some disputes around who
precisely did the work to hack it together), but in any case, I landed on a
fairly simple configuration.  A single SSDT, added to the ACPI in Open Core.

#+BEGIN_SRC xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>ACPI</key>
    <dict>
        <key>Add</key>
        <array>
            <dict>
                <key>Comment</key>
                <string>GC Titan Ridge HotPlug SSDT</string>
                <key>Enabled</key>
                <true/>
                <key>Path</key>
                <string>SSDT-TBOLT3.aml</string>
            </dict>
        </array>
#+END_SRC

#+begin_example
tglynn@jupiter ~/projects/opencore/my_opencore/EFI/OC (master*) $ shasum -a 256 ACPI/SSDT-TBOLT3.aml
54a5f8fc04e723c838deb63052067c380c68e216d693ca23bf61f6683dc60fb9  ACPI/SSDT-TBOLT3.aml
#+end_example

I'm not going to document the whole Open Core setup here - the [[https://forums.macrumors.com/threads/opencore-on-the-mac-pro.2207814/][wiki entry]] at the
start of the MacRumors forum thread has improved by leaps and bounds since I
first went through this back in April, and it's in fantastic shape now.  Follow
that wiki entry, add in the directive above and pull down the [[https://forums.macrumors.com/threads/testing-tb3-aic-with-mp-5-1.2143042/post-28246620][SSDT-TBOLT3.aml
file]] and you should be all set with Thunderbolt 3.

There is one pitfall that snagged me for /quite/ a while.  The Titan Ridge card
needs to be in slot 4 (as I understand it, it's hardcoded in to the SSDT).  Due
to the shared bandwidth of slot 3 and slot 4, if you have another high bandwidth
card in slot 3, the Titan Ridge card will not work with the SSDT enabled.  In my
experience, when I had my Syba I/O card in slot 3 or a USB 3.2 PCIe card in slot
3, the Titan Ridge would work /without/ the SSDT, but would not be recognized or
initialized if I attempted to load the custom SSDT.  Ultimately, I left slot 3
totally empty and made do with slots 1 (for a graphics card), 2 (for NVMe
storage) and slot 4 (for Thunderbolt 3).

I've skimmed over a whole slew of testing and troubleshooting - alternative
firmwares, spelunking through custom SSDTs with [[https://github.com/acidanthera/MaciASL][MaciASL]], several Open Core
versions, but ultimately over the last few months I've found the flashed card
in slot 4, empty slot 3 and the SSDT linked above in Open Core to be the most
reliable and consistent solution.


**** DONE  macpro build - day 2
:PROPERTIES:
:EXPORT_FILE_NAME: mac-pro-buildlog-04
:EXPORT_DATE: 2020-08-29
:END:

Day two is dedicated to some early annoyance fixes, and some temperature and
performance measurements of the NVMe storage.

***** a tiny fan

With a little more burn in time in a quiet room, I noticed a change in the sound
profile of the Mac Pro.  The addition of the Syba I/O card had added in a
high-pitched, whiny fan noise.  This didn't seem to ramp up and down with
temperatures on the M.2 cards; it was a constant, awful whir.

#+CAPTION: The fan in question
file:/images/mp_12.svg

I know that NVMe thermal management is a significant problem, but my ambient and
component temperatures within the machine were pretty good (and I /really/ didn't
like that fan noise), so I thought I'd give it a try with the fan unplugged.
The heatsink closed up nicely, and kept the fan cable tidily in place.

With the (thankfully much quieter) machine back up and running, I thought I'd
see if I could push some I/O to the NVMe devices and see how they handled
dissipating the heat.  I also took it as an opportunity to confirm the
performance characteristics of my storage.

#+begin_example
tglynn@jupiter /Volumes/nvme_storage_01/test_temps $ fio --name=randwrite --rw=randwrite --direct=1 --ioengine=posixaio --bs=64k --numjobs=8 --size=4g --runtime=600 --group_reporting
randwrite: (g=0): rw=randwrite, bs=(R) 64.0KiB-64.0KiB, (W) 64.0KiB-64.0KiB, (T) 64.0KiB-64.0KiB, ioengine=posixaio, iodepth=1
...
fio-3.19
Starting 8 processes
randwrite: Laying out IO file (1 file / 4096MiB)
randwrite: Laying out IO file (1 file / 4096MiB)
randwrite: Laying out IO file (1 file / 4096MiB)
randwrite: Laying out IO file (1 file / 4096MiB)
randwrite: Laying out IO file (1 file / 4096MiB)
randwrite: Laying out IO file (1 file / 4096MiB)
randwrite: Laying out IO file (1 file / 4096MiB)
randwrite: Laying out IO file (1 file / 4096MiB)
Jobs: 8 (f=8): [w(8)][100.0%][w=2075MiB/s][w=33.2k IOPS][eta 00m:00s]
randwrite: (groupid=0, jobs=8): err= 0: pid=3544: Thu Apr 16 18:56:50 2020
  write: IOPS=35.5k, BW=2222MiB/s (2329MB/s)(32.0GiB/14750msec)
    slat (usec): min=2, max=185, avg= 7.37, stdev= 3.60
    clat (usec): min=85, max=7605, avg=214.44, stdev=42.70
     lat (usec): min=96, max=7611, avg=221.81, stdev=42.75
    clat percentiles (usec):
     |  1.00th=[  161],  5.00th=[  174], 10.00th=[  182], 20.00th=[  192],
     | 30.00th=[  198], 40.00th=[  206], 50.00th=[  212], 60.00th=[  219],
     | 70.00th=[  227], 80.00th=[  235], 90.00th=[  249], 95.00th=[  262],
     | 99.00th=[  306], 99.50th=[  355], 99.90th=[  498], 99.95th=[  553],
     | 99.99th=[  742]
   bw (  MiB/s): min= 2073, max= 2264, per=100.00%, avg=2229.27, stdev= 7.56, samples=224
   iops        : min=33168, max=36232, avg=35664.32, stdev=120.83, samples=224
  lat (usec)   : 100=0.01%, 250=90.94%, 500=8.95%, 750=0.09%, 1000=0.01%
  lat (msec)   : 2=0.01%, 4=0.01%, 10=0.01%
  cpu          : usr=5.41%, sys=4.33%, ctx=571965, majf=0, minf=204
  IO depths    : 1=100.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, >=64=0.0%
     submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, >=64=0.0%
     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, >=64=0.0%
     issued rwts: total=0,524288,0,0 short=0,0,0,0 dropped=0,0,0,0
     latency   : target=0, window=0, percentile=100.00%, depth=1

Run status group 0 (all jobs):
  WRITE: bw=2222MiB/s (2329MB/s), 2222MiB/s-2222MiB/s (2329MB/s-2329MB/s), io=32.0GiB (34.4GB), run=14750-14750msec
#+end_example


#+begin_example
tglynn@jupiter /Volumes/nvme_storage_01/test_temps $ fio --name=randwrite --rw=randwrite --direct=1 --ioengine=posixaio --bs=64k --numjobs=8 --size=512m --runtime=600 --group_reporting
randwrite: (g=0): rw=randwrite, bs=(R) 64.0KiB-64.0KiB, (W) 64.0KiB-64.0KiB, (T) 64.0KiB-64.0KiB, ioengine=posixaio, iodepth=1
...
fio-3.19
Starting 8 processes
Jobs: 8 (f=8)
randwrite: (groupid=0, jobs=8): err= 0: pid=3522: Thu Apr 16 18:55:58 2020
  write: IOPS=35.6k, BW=2222MiB/s (2330MB/s)(4096MiB/1843msec)
    slat (usec): min=2, max=127, avg= 6.83, stdev= 3.27
    clat (usec): min=93, max=21151, avg=212.97, stdev=145.17
     lat (usec): min=110, max=21160, avg=219.80, stdev=145.17
    clat percentiles (usec):
     |  1.00th=[  159],  5.00th=[  172], 10.00th=[  180], 20.00th=[  190],
     | 30.00th=[  198], 40.00th=[  204], 50.00th=[  210], 60.00th=[  217],
     | 70.00th=[  223], 80.00th=[  233], 90.00th=[  245], 95.00th=[  260],
     | 99.00th=[  297], 99.50th=[  318], 99.90th=[  465], 99.95th=[  619],
     | 99.99th=[ 1434]
   bw (  MiB/s): min= 2259, max= 2283, per=100.00%, avg=2269.96, stdev= 1.33, samples=24
   iops        : min=36154, max=36538, avg=36313.67, stdev=21.17, samples=24
  lat (usec)   : 100=0.01%, 250=92.19%, 500=7.73%, 750=0.05%, 1000=0.02%
  lat (msec)   : 2=0.01%, 50=0.01%
  cpu          : usr=5.17%, sys=4.42%, ctx=71930, majf=0, minf=189
  IO depths    : 1=100.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, >=64=0.0%
     submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, >=64=0.0%
     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, >=64=0.0%
     issued rwts: total=0,65536,0,0 short=0,0,0,0 dropped=0,0,0,0
     latency   : target=0, window=0, percentile=100.00%, depth=1

Run status group 0 (all jobs):
  WRITE: bw=2222MiB/s (2330MB/s), 2222MiB/s-2222MiB/s (2330MB/s-2330MB/s), io=4096MiB (4295MB), run=1843-1843msec
#+end_example

Temperatures on the NVMe devices peaked around 52° (C), and dropped back down to
the idle temp of 39° in less than a minute. Those are not worrying temperatures,
but unplugging the Syba's fan does compound my fears around airflow, since the
Syba I/O card rests right up against the GPU, and the GPU exhaust will blow
right across it.  I'm not so sure that the Syba's fan would be able to do much about that
suboptimal situation anyway.  It would still be pulling in the hot exhaust from
the GPU to do whatever cooling it can (and I imagine the GPU fans are moving
much more air than the tiny Syba fan ever could).  But it's worth testing nonetheless.

***** changing slots

Moving the Syba I/O card to slot 3 was trivial (I was worried that there might
be some problems finding the boot drive, but it was a total nonevent).  The
change from slot 2 to slot 3 means the card is now in a PCI Express 1.0 x4 slot,
rather than a PCI Express 2.0 x16 slot.  So the maximum theoretical throughput
of the Syba is now (250 MB/s * 4 * 2) 2000 MB/s (made even slower due to limited
connection from South Bridge, where slots 3 and 4 are connected, to the North
Bridge).  A quick =fio= benchmark proved that change out:

#+begin_example
tglynn@jupiter /Volumes/nvme_storage_01/test_temps $ fio --name=randwrite --rw=randwrite --direct=1 --ioengine=posixaio --bs=64k --numjobs=8 --size=4g --runtime=600 --group_reporting
randwrite: (g=0): rw=randwrite, bs=(R) 64.0KiB-64.0KiB, (W) 64.0KiB-64.0KiB, (T) 64.0KiB-64.0KiB, ioengine=posixaio, iodepth=1
...
fio-3.19
Starting 8 processes
Jobs: 8 (f=8): [w(5),f(1),w(2)][100.0%][w=1503MiB/s][w=24.0k IOPS][eta 00m:00s]
randwrite: (groupid=0, jobs=8): err= 0: pid=943: Fri Apr 17 16:46:54 2020
  write: IOPS=23.8k, BW=1490MiB/s (1562MB/s)(32.0GiB/21994msec)
    slat (nsec): min=2715, max=98380, avg=7062.84, stdev=3011.27
    clat (usec): min=117, max=9036, avg=325.37, stdev=48.69
     lat (usec): min=127, max=9042, avg=332.43, stdev=48.67
    clat percentiles (usec):
     |  1.00th=[  289],  5.00th=[  302], 10.00th=[  310], 20.00th=[  314],
     | 30.00th=[  318], 40.00th=[  318], 50.00th=[  322], 60.00th=[  322],
     | 70.00th=[  326], 80.00th=[  330], 90.00th=[  343], 95.00th=[  355],
     | 99.00th=[  445], 99.50th=[  644], 99.90th=[  668], 99.95th=[  676],
     | 99.99th=[  807]
   bw (  MiB/s): min= 1406, max= 1520, per=100.00%, avg=1491.52, stdev= 2.70, samples=344
   iops        : min=22510, max=24322, avg=23861.98, stdev=43.04, samples=344
  lat (usec)   : 250=0.02%, 500=99.17%, 750=0.80%, 1000=0.01%
  lat (msec)   : 2=0.01%, 4=0.01%, 10=0.01%
  cpu          : usr=3.55%, sys=2.97%, ctx=542369, majf=0, minf=193
  IO depths    : 1=100.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, >=64=0.0%
     submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, >=64=0.0%
     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, >=64=0.0%
     issued rwts: total=0,524288,0,0 short=0,0,0,0 dropped=0,0,0,0
     latency   : target=0, window=0, percentile=100.00%, depth=1

Run status group 0 (all jobs):
  WRITE: bw=1490MiB/s (1562MB/s), 1490MiB/s-1490MiB/s (1562MB/s-1562MB/s), io=32.0GiB (34.4GB), run=21994-21994msec
#+end_example

Temperature was totally unchanged.  The NVMe cards idled around 39°, and peaked
under heaviest sustained load around 52°.

With no temperature impact and a clear performance change, I decided to keep the
Syba I/O card in slot 2, and run it with the built in fan unplugged.


**** DONE macpro build - day 1
:PROPERTIES:
:EXPORT_FILE_NAME: mac-pro-buildlog-03
:EXPORT_DATE: 2020-05-13
:END:

***** the machine
It begins!  First, we'll verify our day 0 assumptions, and examine the machine
itself.

#+CAPTION: A first peek inside
[[file:/images/mp_02.svg]]

All told, it's cosmetically /fine/.  I'd love a more pristine chassis (this guy
has definitely been bounced off some rough corners), but it was
relatively clean on the inside.  I blew the machine out with compressed air and
wiped down all of touchable surfaces before really cracking in.

(A small disappointment; it shipped with a generic power cable, and was missing
a drive tray.  I understand lots of shops find it easier to strip the whole tray
out when decommissioning these machines, and keeping track of the original power
cable is well beyond the purview of most IT shops, but I would have preferred to
get all of the original components).

Starts up just fine the first time that I plug it in and hit the power
button. All fans are rotating, optical drive seems to be fully functional as
well.

***** clean install

Let's get ourselves a clean macOS installation first.  We'll follow the Apple
kbase article [[https://support.apple.com/en-us/HT201372][here]] to create a USB 2.0 bootable installer.  Booting to the
installer works just fine and disk utility doesn't complain about re
partitioning the 1 TB internal HDD.  I chose HFS+, since this is a rotational
drive (I'll use APFS for the NVMe installations).

Before I can reinstall High Sierra, I'm prompted for the first firmware update.
It had been a long time since I last ran a firmware update on a Mac Pro; if you
find yourself trying to do it, be patient -  it takes longer than you might
expect.  The optical drive will pop open during the process (to allow you to pop
in a CD with differing firmware, if I recall correctly), so keep an eye out for
the opening and closing of the optical drive.

With the firmware update done and a fresh install of High Sierra completed, it's
time to log in and capture the specs of the machine.

***** the specs

Of note here are the current boot ROM version.  The machine can't boot from an
NVMe drive on this boot ROM, so we'll need to run some more firmware updates
before we get the actual macOS installation setup.


#+begin_example
Hardware Overview:

  Model Name:	Mac Pro
  Model Identifier:	MacPro5,1
  Processor Name:	Quad-Core Intel Xeon
  Processor Speed:	2.4 GHz
  Number of Processors:	2
  Total Number of Cores:	8
  L2 Cache (per Core):	256 KB
  L3 Cache (per Processor):	12 MB
  Memory:	16 GB
  Boot ROM Version:	MP51.0089.B00
  SMC Version (system):	1.39f11
  SMC Version (processor tray):	1.39f11
  Serial Number (system):	<REDACTED>
  Serial Number (processor tray):	<REDACTED>
  Hardware UUID:	<REDACTED>



ATI Radeon HD 5770:

  Chipset Model:	ATI Radeon HD 5770
  Type:	GPU
  Bus:	PCIe
  Slot:	Slot-1
  PCIe Lane Width:	x16
  VRAM (Dynamic, Max):	1024 MB
  Vendor:	AMD (0x1002)
  Device ID:	0x68b8
  Revision ID:	0x0000
  ROM Revision:	113-C0160C-155
  VBIOS Version:	113-C01601-103
  EFI Driver Version:	01.00.436
  Displays:
24G1WG4:
  Resolution:	1920 x 1080 (1080p FHD - Full High Definition)
  UI Looks like:	1920 x 1080 @ 60 Hz
  Framebuffer Depth:	24-Bit Color (ARGB8888)
  Main Display:	Yes
  Mirror:	Off
  Online:	Yes
  Rotation:	Supported
  Automatically Adjust Brightness:	No
  Connection Type:	DisplayPort



Memory Slots:

  ECC:	Enabled
  Upgradeable Memory:	Yes

DIMM 1:

  Size:	8 GB
  Type:	DDR3 ECC
  Speed:	1066 MHz
  Status:	OK
  Manufacturer:	0x857F
  Part Number:	0x463732314755363746393333334700000000
  Serial Number:	-

DIMM 2:

  Size:	Empty
  Type:	Empty
  Speed:	Empty
  Status:	Empty
  Manufacturer:	Empty
  Part Number:	Empty
  Serial Number:	Empty

DIMM 3:

  Size:	Empty
  Type:	Empty
  Speed:	Empty
  Status:	Empty
  Manufacturer:	Empty
  Part Number:	Empty
  Serial Number:	Empty

DIMM 4:

  Size:	Empty
  Type:	Empty
  Speed:	Empty
  Status:	Empty
  Manufacturer:	Empty
  Part Number:	Empty
  Serial Number:	Empty

DIMM 5:

  Size:	8 GB
  Type:	DDR3 ECC
  Speed:	1066 MHz
  Status:	OK
  Manufacturer:	0x857F
  Part Number:	0x463732314755363746393333334700000000
  Serial Number:	-

DIMM 6:

  Size:	Empty
  Type:	Empty
  Speed:	Empty
  Status:	Empty
  Manufacturer:	Empty
  Part Number:	Empty
  Serial Number:	Empty

DIMM 7:

  Size:	Empty
  Type:	Empty
  Speed:	Empty
  Status:	Empty
  Manufacturer:	Empty
  Part Number:	Empty
  Serial Number:	Empty

DIMM 8:

  Size:	Empty
  Type:	Empty
  Speed:	Empty
  Status:	Empty
  Manufacturer:	Empty
  Part Number:	Empty
  Serial Number:	Empty
#+end_example

We're definitely not running the stock RAM (the OWC sticker in the earlier
picture was a bit of a tip off there), but it's good to hang on to some known
good memory for slot testing and troubleshooting.  Ultimately, the goal is to
be able to isolate any failures component by component, following the flow of
signal and power, until the source of any problem is obvious.  The 8 gig OWC
DIMMs can serve that purpose quite well in the future.


***** baseline performance

Let's capture what this machine can do before we start improving it.  I'm going
to use synthetic benchmarks as a short hand for performance because it's simple
and straightforward; actually computing performance is anything but that.  At
some point I'll probably write up my performance testing manifesto, but in the
mean time, I'm going to say this: synthetic benchmarks can be a useful shorthand
for some performance characteristics in well understood problem spaces.  I'm
going to use them here because it'll be fun to see the numbers go up.

****** geekbench 5, cinebench 20

Sitting next to the machine while it runs the [[https://www.geekbench.com][Geekbench 5]], I'm struck by how
little change there is in the pitch and volume of the fans.  It's not a silent
machine by any stretch of the imagination, but it's a consistent white noise
that's not particularly distracting.  It's not a long test (4 or 5 minutes to
complete), so that could certainly change if it ran for longer, but all told, a
good first impression for usability during compute tasks.

Note again this is running with the original pair of Xeon 5620's (2 processors,
each with 4 cores and 8 threads) with 16 gigs (2x8) of 1066 MHz DDR3 memory.
The graphical benchmarks will be testing the ATI Radeon HD 5770.

| Benchmark                    | Result |
|------------------------------+--------|
| Geekbench 5 CPU, Single Core |    485 |
| Geekbench 5 CPU, Multi Core  |   3160 |
| Geekbench 5 Compute (OpenCL) |   1005 |
| Cinebench                    |   1640 |

Nothing surprising there.  Our single core performance is pretty dismal.  Multi
core performance puts us just below the 4 core 8 thread 2.6 GHz Intel Core
i7 6700.  Graphical performance...makes sense for a card from a previous decade.

***** stability and load

I'd like to check out the general stability of the machine as well, before I
start making changes and introducing potential chaos.  My stability checks here
are pretty simple; I'll open up eight instances of terminal, each redirecting
the =yes= command to =/dev/null=.  That'll keep threads of execution running at
clock rate along each of the eight real physical cores.  And I'll just leave
that running.  Ideally, we won't hear a huge change in fan volume (if I were
really good about this, I'd actually measure the ambient and specific volumes
during this test, but considering the myriad of other noises in and around my
home, I'm totally comfortable with the less scientific approach of playing it by
ear), and the machine should be responsive throughout the test.

All told, I let this run for about 6 hours, hopping on occasionally to open a
browser window or move some Finder windows around.  No issues with
responsiveness and it was still running just fine at the tail end of it.  Not
necessarily a perfect bill of health, but a pretty good indicator of stability.
Funnily enough, my work laptop (2015 15 inch Macbook Pro) is louder running
builds than the Mac Pro.

***** installing the rx 580

This machine has such lovely little touches.  The PCI card locking bar,
controlled with a button press from an enclosure around the central system fan
is quite clever.  And of course, the PCI slot cover plate has good sized,
grippable thumb screws (and they're captured! why would they not be?) that
really put to shame so many other generic cases.  I understand that case design
and ergonomics have been improving in general in the PC industry, but many of
the machines that I've worked on before had terribly fussy screws holding the
PCI slot covers in place.  This simple place is such a nice touch.

#+CAPTION: Easy to turn by hand, with Phillips slots for undoing overzealous tightening
[[file:/images/mp_03.svg]]

Power for the RX 580 is an easy story.  Just replace the 5770's mini six pin to
six pin with a two mini six pin to eight pin cable.

#+CAPTION: Two mini six pin to eight pin cable
[[file:/images/mp_04.svg]]


Out comes the 5770

#+CAPTION: ATI Radeon HD 5770
[[file:/images/mp_05.svg]]


And in goes the RX 580

#+CAPTION: RX 580
[[file:/images/mp_06.svg]]

#+CAPTION: The installed 580
[[file:/images/mp_07.svg]]

I'll confess, I'm a little concerned at this point about airflow.  Looking at
the NVMe card, it's going to be flush right up against the RX 580.  Heat might
be a concern here.

***** firmware updates

Now that there's a Metal capable GPU installed, the Mojave installer will launch
(without a Metal capable GPU, the unpatched installer won't run).  I'm not
actually interested in the install at this point, since we'll be installing to
the NVMe drive, but the firmware updater is bundled into the 10.14.6 combo
installer.

Since the RX 580 isn't mac flashed (this era of Macs ran non standard extensible
firmware interface (EFI), not to be confused with the now ubiquitous UEFI.  The
generic RX 580 doesn't know how to display video during the EFI stage of
booting, so no video at the boot prompt), I'll be flying blind here.  Flashing
power LED, long tone, and the optical drive opening and closing are the only
indicators to the process.

Coming back into the operating system, we've got the right firmware now to boot
from an NVMe drive.

#+CAPTION: The sharp eyed reader will see upgraded CPUs and memory here; I had to take this screenshot after the fact
[[file:/images/mp_08.svg]]

Now it's time for the NVMe cards and the real Mojave installation.

***** nvme card

#+CAPTION: Syba I/O Crest
[[file:/images/mp_09.svg]]

These are some positively /tiny/ standoffs.  Screwing them in from the bottom is
fussy work.  There may or may not have been a few frantic minutes waving a
flashlight across my floor to find the telltale flicker of a dropped standoff
screw.

#+CAPTION: Look at how tiny they are!
[[file:/images/mp_10.svg]]

I foolishly thought that using the provided screw driver was a good idea.
Definitely not.  Switching to a real magnetized jeweler's set made getting the
m.2 drives installed much easier.

It's a tight fit against the RX 580.  They are cheek to jowl in there, and I'll
need to keep an eye on temperatures.

#+CAPTION: The Syba installed
[[file:/images/mp_11.svg]]


Both drives are recognized immediately.  A quick trip to disk utility leaves us
with a GUID partition scheme for an APFS volume that will serve as the target of
the Mojave installation.

Nothing eventful to the install; kick it off, get some coffee, and come back to
a clean install of Mojave.

At this point, I'm done with the original 1 TB rotational drive (at close to 10
years old, I wouldn't want to rely on it for anything).  I'll put it in my big
box of just-in-case parts for the Mac Pro joining the 5770, to be dusted off in case of a need to
return to High Sierra.


***** revisiting gpu performance

With the newly installed card, let's take a loot at the changes in GPU
performance.

| Benchmark                    | Result |
|------------------------------+--------|
| GeekBench 5 Compute (OpenCL) |  39043 |
| GeekBench 5 Compute (Metal)  |  42658 |


Almost a 40x improvement; not too shabby at all.

**** DONE macpro build - day 0
:PROPERTIES:
:EXPORT_FILE_NAME: mac-pro-buildlog-02
:EXPORT_DATE: 2020-05-12
:END:

Now that we now what we're going to try to do here and why, let's formulate some
kind of plan for this project.

***** the plan

I'm going to start with the lowest spec 2 processor tray.  I might have been
able to find a better deal on a single processor machine and then source a dual
proc CPU tray, but from a cursory search of ebay and craigslist, that might take
a while, and I'm a little concerned about extra shipping cycles and part
availability.  Ultimately, I landed on:

=Apple Mac Pro 5,1 MC561LL/A (2010) 8 Core/16GB/1TB/ ATI Radeon 5770=

(Note that the =8 Core= specification spells out two quad core CPUs)

More details around that particular Mac available [[https://everymac.com/systems/apple/mac_pro/specs/mac-pro-eight-core-2.4-mid-2010-westmere-specs.html][here]].

Most of those specs are stock - that is the GPU that shipped with that machine in
2010, which is important for getting the bootscreen and will be a useful thing to keep
around for troubleshooting, and a 1 TB 7200 RPM rotating drive also could well
be original.  The RAM isn't stock (the original machine shipped with six 1 GB
DIMMs), but that's a super common upgrade, and I don't imagine we'll need the
factory RAM for anything.

From the listing, the machine is running High Sierra.  Unclear which firmware it
will ship with.

/What's the plan?/

There are a few interlocking steps here. To upgrade from High Sierra to Mojave,
I'll need a metal capable graphics card.  Switching to a metal capable graphics
card probably means giving up the boot screen (there are flashed firmware cards,
and folks who offer firmware flashing as a service, but I don't think it's worth
it for my use case).  I'll likely end up running [[https://github.com/acidanthera/OpenCorePkg][OpenCore]] anyway to allow me to
update to Catalina with hardware acceleration and Thunderbolt 3 support, so the
boot screen isn't a big loss.

So I need a metal capable GPU.  I've gone back and forth a bit, trying to decide
between the 5700 XT and the Radeon VII.  The 5700 XT is a newer Navi card, with
some significant benefits to power draw and cooling.  They're both 7nm
processes, but the Radeon VII is much more power hungry.  To the Radeon VII's
credit, it appears to benchmark better than the 5700 XT in several performance
characteristics, and, most importantly, is supported in both Mojave and Catalina
(the 5700XT requires a relatively new version of Catalina).  Both would likely
require modifying my power supply.  In the end, I landed on the Radeon VII for
the slightly increased flexibility, slightly better performance and slightly
better price.  I will need an interim card, a card that runs in both High Sierra
and Mojave so that I can perform the litany of firmware updates and the crucial
update from High Sierra to Mojave.  It will also take some time to get the parts
required for the power supply mod, so I'll be using an MSI RX 580 Armor 8G OC
with a dual mini 6 pin to 8 pin power adapter in the interim.

I'll keep the 1 TB HDD on High Sierra so that I can use the original 5770 (once
I upgrade to Mojave, the 5770 won't be able to boot the OS).  The plan starts to
look like:

1. Document and benchmark the initial system
2. Run High Sierra firmware updates, wipe 1 TB HDD and clean install High Sierra
3. Install Radeon RX 580.  Power the card with a dual mini 6 pin to single 8 pin
   adapter.
4. Run all firmware updates bundled in the Mojave installer. This will bring the
   machine's firmware to =144.0.0.0.0=, and crucially adds the ability to boot
   off of NVMe drives.
5. Install PCIe NVMe bifurcation Riser and boot NVMe drive in slot 2
6. Install Mojave to NVMe drive.  Remove 1 TB HDD, store in safe place.
7. Flash Titan Ridge thunderbolt 3 card
8. Install Thunderbolt 3 card
9. Upgrade CPUs
10. Upgrade memory
11. Perform [[http://blog.greggant.com/posts/2018/05/07/definitive-mac-pro-upgrade-guide.html#pixlas][pixlas mod on power supply]]
12. Install Radeon VII
13. Upgrade optical drive to Blu-ray drive
14. Install Windows 10 (to either SATA SSD or, if I've installed OpenCore, to
    the second NVMe drive)

***** componentry

This will leave me with a machine that looks like (from the bottom of the box
up):

| Location            | Component                                                                        |
|---------------------+----------------------------------------------------------------------------------|
| CPU Tray            | 2 x Xeon 5690 (32 nm 6 core, 12 thread 3.46-3.73 GHz processors)                 |
| Memory Slots        | 96 gigabytes (6 x 16) DDR3 ECC memory at 1333 MHz                                |
| PCIe Slot 1         | Radeon VII                                                                       |
| PCIe Slot 2         | Syba I/O Crest SI-PEX40129 Dual M.2 NVMe Bifurcation Riser                       |
| Syba Slot 1         | 1 TB Samsung 970 Evo NVMe (macOS boot drive)                                     |
| Syba Slot 2         | 1 TB Samsung 970 Evo NVMe (Windows 10)                                           |
| PCIe Slot 3         | Sonnet Allegro USB-c 4 port PCIe card                                            |
| PCIe Slot 4         | Gigabyte GC-Titan Ridge Thunderbolt 3 card                                       |
| Drive Bay 1         | 8 TB Seagate HDD (Time Machine, EFI host for OpenCore)                           |
| Drive Bay 2         | 3 TB WD Red HDD (Mac rotational storage)                                         |
| Drive Bay 3         | 3 TB WD Red HDD (Windows rotational storage)                                     |
| Drive Bay 4         | 3 TB WD Red HDD (Vanilla Mojave bootable snapshot, for OpenCore troubleshooting) |
| Optical Drive Bay 2 | Empty                                                                            |
| Optical Drive Bay 1 | LG WH16NS60 16x Internal Blu-ray BDXL M-Disc Drive (flashed for UHD rips)        |


***** references

- [[http://blog.greggant.com/posts/2018/05/07/definitive-mac-pro-upgrade-guide.html][The Definitive Classic Mac Pro Upgrade Guide]] - just an outstanding
  resource. Lots of information, lots of links.  This single post provides
  almost all of required info for this project.

- [[https://forums.macrumors.com/threads/testing-tb3-aic-with-mp-5-1.2143042/][MacRumors thread, Thunderbolt 3]] - ever evolving, source of some great
  information about flashing the Titan Ridge for use in the cMP 5,1

- [[https://forums.macrumors.com/threads/opencore-on-the-mac-pro.2207814/?view=reaction_score][OpenCore on Legacy Apple Hardware]] - another fantastically maintained wiki
  post.  Improved by leaps and bounds even as I'm writing this up.

- [[https://github.com/ameyrupji/thunderbolt-macpro-5-1][Thunderbolt Mac Pro Early 2009]] - good summation of the flashing process, with
  some very useful pictures and links

- [[https://www.makemkv.com/forum/viewtopic.php?f=16&t=19928&sid=66451896270b9a530b25b882ed3aad55][Flashing for 4k UHD]] - not cMP 5,1 specific, but great information on flashing
  the Blu-ray drive for 4k UHD rips

- [[https://www.tonymacx86.com/threads/success-gigabyte-designare-z390-thunderbolt-3-i7-9700k-amd-rx-580.267551/][Gigabyte designare flashing]] - the micro guides provide a ton of useful
  background information, and tend to be a little more technical in their
  explanations.  Useful for trying to understand /why/ some steps are required.


**** DONE macpro build - what and why
:PROPERTIES:
:EXPORT_FILE_NAME: mac-pro-buildlog-01
:EXPORT_DATE: 2020-05-12
:END:

In March of 2020, I went looking for a project.  I was looking for something
that I could focus some extra time and energy on (that /wasn't/ just frantically
refreshing news sites).  I was working from home full time for the first time in
my life, a change which necessitated some alterations to my workspace.  Graduate
school was finished, so I could afford some instability on my personal machine,
and the 5k iMac that had served as the anchor of my home computing life was now
in the way (I couldn't use it for work, so it ended up awkwardly shunted aside
most days, and moving it back into place every night was /just/ annoying enough
to be untenable.  It was easier to just leave my work machine plugged in and
running, but /that/ lead to the temptation to do juuuust a little more work
whenever I sat down at my desk; you can imagine the impact that had on work-life
balance).

Enter the 5,1 Mac Pro.

***** the cheese grater

The 5,1 Mac Pro, released in 2010, with a minor spec bump shipped in 2012 and
ultimately replaced by late 2013's trash can, is a very special machine.  Due to
the design choices (and expense) of the models that replaced it, it's had a long
and vibrant life as an expandable, flexible, workstation that can be kitted out
for a variety of use cases.  It holds a special place in my heart as the most
powerful machine Apple was shipping during my time as a Genius; it was the most
complicated machine to troubleshoot, given the flexibility and complexity of its
internals, but it was always a thrill to see one sidle up to the bar.  It was a
machine that /did work/ (or at least, purported to. I fully recognize the myth
of the Mac Pro, which was always more costly than it had any right to be).

Could it be my 2020 computer?

#+CAPTION: cMP 5,1
[[file:/images/mp_01.svg]]

***** what's the goal?

What am I trying to do here, exactly?  I'm looking to wrangle up a Mac desktop,
responsive enough for day to day use, with enough compute and memory to handle
my polyglot programming (virtualization and containerization, some Go, a
smattering of C++/Clojure/Swift/Python, depending on what I'm picking at on a
particular day), and the graphical power to run the handful of games (some
Blizzard titles, Total War: Warhammer and its sequels, Tabletop Simulator).

I'm loosely describing my requirements as: a desktop,  running macOS, built by
Apple.


/Why a desktop?/

In my experience, laptops add a thin layer of unreliability when being used
permanently docked at a desk.  Peripheral negotiation is often fussy, cooling
can be a problem, and ultimately it feels to me like a misuse of the object.
Look at a laptop; it's fundamentally designed for portability. Using it
permanently tethered feels like hammering nails in with the back end of a
screwdriver.

/Why macOS?/

Windows is a tire fire.  The software ecosystem is a Hieronymus Bosch style
rhizome of misery and suffering, and software development on Windows outside of
the Microsoft ecosystem just sucks.  That's all a deliberately inflammatory
description, but it captures how I feel (and the bulk of my experience trying to
develop for Linux systems on Windows in my previous job).  Window management is
remedial (whoever thought full screen and half screen splits were a good idea,
and parasitically infected other operating systems with that idea should be
tried at the Hague), keyboard shortcuts across the OS for text wrangling suck,
and Emacs on Windows suffers from all sorts of painful compromises.

A more measured answer to "Why not Windows?" is that I don't have room in my brain at the moment
for a detailed enough mental model of the foibles and pit traps of Windows 10.  I'm
not particularly interested in building that model, to be totally honest, since I
find the essential primitives of Windows as an operating system (the registry?
really?) and the user punishing choices (adware in the start menu, user hostile
updates) alien and off putting.  It's the only way to play PC games, so I'll
always have it installed somewhere in the house, but I'd like it as cordoned off
as possible.

The desktop experiences of the non-macOS *nixs are unpleasant for me. Window
management and keyboard shortcuts tend to ape Windows out of the box (yes, there
are distros and customization paths to mimic macOS, but they're never quite 100%
reliable in my experience).  I'll continue to happily run Linux and BSD servers, both in
the house on a handful of headless machines and in VPS's, but for a desktop
machine macOS is the best choice for me.

/Why not a Hackintosh?/

Given the decision to run macOS and the computational/GPU requirements, an
obvious question would be "Why not build a Hackintosh?" OpenCore has come a long
way, the community is active and communicative, AMD has some rad chip offerings
bringing high core counts way down in price - there are a lot of compelling
reasons to build a Hackintosh.  I've done it before, almost half a decade ago,
and found Clover pretty straightforward to configure, and the resulting machine
was powerful and flexible.  But honestly, I've built more than enough PCs.  It's
boring, in many ways, and I don't think building a generic PC and installing
macOS on it would be the engaging project that I'm looking for amidst all of
this chaos.


I have a great deal of affection for the 5,1 Mac Pro.  The high core count, high
memory configuration is surprisingly effective in 2020, and fits my use cases
especially well.  Most intriguingly, the vibrant Mac Pro community has made huge
leaps in recent months, bringing Catalina support, hardware acceleration and,
most importantly to me, Thunderbolt 3.  Thunderbolt support would mean one cable
to plug in my work laptop during the day, and a single cable moving over to
switch to my main machine outside of work.
